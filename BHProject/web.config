<?xml version="1.0" encoding="utf-8"?>
<configuration>
	<appSettings>
		<add key="ConnectionStringDev" value="Data Source=db.db;" />
		<add key="ConnectionStringProd" value="Data Source=db.db;" />
		<add key="StaticFileCacheSeconds" value="5" />
		<add key="SessionTimeout" value="86400" />
		<add key="CookieExpireDays" value="365" />
	</appSettings>
	<location path="." inheritInChildApplications="false">
		<system.webServer>
			<handlers>
				<add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
			</handlers>
			<aspNetCore processPath="%LAUNCHER_PATH%" arguments="%LAUNCHER_ARGS%" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" hostingModel="inprocess" disableStartUpErrorPage="false"/>
			<security>
				<requestFiltering allowDoubleEscaping="true">
					<!--maxAllowedContentLength is in bytes, so 1024 * 1024 = 1,048,576 bytes = 1 MB-->
					<!--1,048,576 bytes * 1.5 = 1,572,864 = 1.5 MB-->
					<!--1,048,576 bytes * 100 = 103,809,024 = 100 MB-->
					<requestLimits maxAllowedContentLength="15728640" />
					<!--restrict access to folders-->
					<!--
          <hiddenSegments>
          <add segment="bin"/>
          </hiddenSegments>
          -->
					<!--This causes http://yoursite/bin to be blocked (but http://yoursite/binary still works)-->
					<!--this will also block yoursite/bla/bin/test-->
				</requestFiltering>
			</security>
			<!--          
          in the <match> tag, the RegEx is matched against whatever comes after the domain and first slash,
          but stops at the query string. for example, in http://www.example.com/dog/file.php/cat/folder/page.php/banana?var=7,
          the RegEx will be matched against the text "dog/file.php/cat/folder/page.php/banana"

          Server Variables
          CACHE_URL: http://www.example.com/dog/file.php/cat/folder/page.php/banana?var=7
          HTTP_HOST: www.example.com
          HTTP_URL: /dog/file.php/cat/folder/page.php/banana?var=7
          REQUEST_URI: /dog/file.php/cat/folder/page.php/banana?var=7 (same as HTTP_URL)
          SCRIPT_FILENAME: c:\webdev\site\www\dog\file.php
          SCRIPT_NAME: /dog/file.php
          SCRIPT_TRANSLATED: \\?\c:\webdev\site\www\dog\file.php
          QUERY_STRING: var=7
          HTTPS: off
          SERVER_PORT: 8080
          SERVER_PORT_SECURE: 0
          HTTP_X_ORIGINAL_URL: (empty)
          UNENCODED_URL: /dog/file.php/cat/folder/page.php/banana?var=7
          PATH_INFO: /dog/file.php/cat/folder/page.php/banana
          PATH_TRANSLATED: c:\webdev\site\www\dog\file.php\cat\folder\page.php\banana
          SSI_EXEC_DISABLED: (empty)
          SERVER_SOFTWARE: Microsoft-IIS/10.0
          GATEWAY_INTERFACE: CGI/1.1
          URL: /dog/file.php
          URL_PATH_INFO: (empty)
          -->
			<!--
          {R:N} gets capture groups from the <match> tag
          {C:N} gets capture groups from the *LAST* <add> tag in the <conditions> tag.
          If there are no capturing groups in the last <add> tag, and you try to use {C:N} in the action url,
          you will get error 500.50 "URL Rewrite Module Error" (unless you set <conditions trackAllCaptures="true">)

          MAKE SURE THERE IS NOT AN .htaccess FILE IN THE DOCUMENT ROOT, AS IT WILL INTERFERE WITH THE REWRITE RULES DEFINED HERE

          if you set a rewrite rule and specify a folder in the action element's url attribute, the url must end with a slash, like url="database/"
          if there is no ending slash, then the server will send an infinite redirect to the client
          for example, if you set url="database" (no ending slash), then the user will be infinitely redirected to "database"
          -->
			<!--Redirect to www must come first...not all redirect urls will include www, but all redirect urls will include https-->
			<!--all condition patterns check for \. in the HTTP_HOST to make sure we don't accidentally try to redirect localhost-->
			<rewrite>
				<rules>
					<rule name="www" stopProcessing="true">
						<conditions logicalGrouping="MatchAll">
							<add input="{HTTP_HOST}" matchType="Pattern" pattern="^(?!www\.)[^.]*\." />
						</conditions>
						<match url=".*" />
						<action type="Redirect" url="https://www.{HTTP_HOST}{REQUEST_URI}" redirectType="Permanent" appendQueryString="false" />
					</rule>
					<rule name="https" stopProcessing="true">
						<conditions logicalGrouping="MatchAll">
							<add input="{HTTPS}.{HTTP_HOST}" matchType="Pattern" pattern="^off\.[^.]*\." />
						</conditions>
						<match url=".*" />
						<action type="Redirect" url="https://{HTTP_HOST}{REQUEST_URI}" redirectType="Permanent" appendQueryString="false" />
					</rule>
				</rules>
			</rewrite>
			<!--
      ==========================================================================================
      errorMode Info:

      DetailedLocalOnly - Returns detailed error information if the request is from the local computer,
      and returns a custom error message if the request is from an external computer.

      Custom - Replaces the error that the module or server generates with a custom page that you specify.
      This mode is useful in providing friendlier error messages to end users.

      Detailed - Sends detailed error information back to the client.
      This mode is useful for testing and debugging Web sites and applications.
      ==========================================================================================
      existingResponse Info:
      Specifies what happens to an existing response when the HTTP status code is an error, i.e. response codes >= 400.
      The existingResponse attribute can be one of the following values; the default is Auto.

      Auto: Leaves the response untouched only if the SetStatus flag is set.

      Replace: Replaces the existing response even if the SetStatus flag is set.

      PassThrough: Leaves the response untouched if an existing response exists.
      ==========================================================================================
      responseMode Info:
      Specifies how custom error content is returned.

      File: Serves static content, for example, a .html file for the custom error. If responseMode is set to File,
      the path attribute value has to be a file path. For example, for a file "robots.txt" in a folder named "wwwroot",
      the attribute should read [path="wwwroot\robots.txt"] (only backslashes must be used, and there can be no leading backslash)

      ExecuteURL: Serves dynamic content (for example, an .asp file) specified in the path attribute for the custom error.
      If responseMode is set to ExecuteURL, the path value has to be a server relative URL.

      Redirect: Redirects client browsers to a the URL specified in the path attribute that contains the custom error file.
      If responseMode is set to Redirect, the path value has to be an absolute URL.
      ==========================================================================================
      "SetStatus is actually talking about the fTrySkipCustomErrors flag/argument to the IHttpResponse::SetStatus method in the IIS C++ SDK"
      "I would expect to see IIS replace the response with its own html error page content
      (you can configure what that content is) by default unless you set: Response.TrySkipIisCustomErrors = true;"
      ==========================================================================================
      -->
			<httpErrors errorMode="Detailed" existingResponse="Auto">
				<!--
        <remove statusCode="500"/>
        <error statusCode="500" path="wwwroot\error.html" responseMode="File"/>
        -->
			</httpErrors>
		</system.webServer>
	</location>
</configuration>